{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","social-web-infinity/tests/adapters/login.jshint.js","social-web-infinity/tests/adapters/post.jshint.js","social-web-infinity/tests/adapters/user-info.jshint.js","social-web-infinity/tests/app.jshint.js","social-web-infinity/tests/components/chat-card.jshint.js","social-web-infinity/tests/components/menu-card.jshint.js","social-web-infinity/tests/components/post-card-text.jshint.js","social-web-infinity/tests/components/post-card-with-image.jshint.js","social-web-infinity/tests/components/post-card-with-video.jshint.js","social-web-infinity/tests/components/profile-card.jshint.js","social-web-infinity/tests/controllers/application.jshint.js","social-web-infinity/tests/controllers/home.jshint.js","social-web-infinity/tests/controllers/user-info.jshint.js","social-web-infinity/tests/helpers/destroy-app.js","social-web-infinity/tests/helpers/destroy-app.jshint.js","social-web-infinity/tests/helpers/module-for-acceptance.js","social-web-infinity/tests/helpers/module-for-acceptance.jshint.js","social-web-infinity/tests/helpers/resolver.js","social-web-infinity/tests/helpers/resolver.jshint.js","social-web-infinity/tests/helpers/start-app.js","social-web-infinity/tests/helpers/start-app.jshint.js","social-web-infinity/tests/instance-initializers/service-call.jshint.js","social-web-infinity/tests/integration/components/chat-card-test.js","social-web-infinity/tests/integration/components/chat-card-test.jshint.js","social-web-infinity/tests/integration/components/menu-card-test.js","social-web-infinity/tests/integration/components/menu-card-test.jshint.js","social-web-infinity/tests/integration/components/post-card-text-test.js","social-web-infinity/tests/integration/components/post-card-text-test.jshint.js","social-web-infinity/tests/integration/components/post-card-with-image-test.js","social-web-infinity/tests/integration/components/post-card-with-image-test.jshint.js","social-web-infinity/tests/integration/components/post-card-with-video-test.js","social-web-infinity/tests/integration/components/post-card-with-video-test.jshint.js","social-web-infinity/tests/integration/components/profile-card-test.js","social-web-infinity/tests/integration/components/profile-card-test.jshint.js","social-web-infinity/tests/models/home.jshint.js","social-web-infinity/tests/models/login.jshint.js","social-web-infinity/tests/models/post.jshint.js","social-web-infinity/tests/models/user-info.jshint.js","social-web-infinity/tests/resolver.jshint.js","social-web-infinity/tests/router.jshint.js","social-web-infinity/tests/routes/home.jshint.js","social-web-infinity/tests/routes/login.jshint.js","social-web-infinity/tests/services/service.jshint.js","social-web-infinity/tests/test-helper.js","social-web-infinity/tests/test-helper.jshint.js","social-web-infinity/tests/unit/adapters/home-test.js","social-web-infinity/tests/unit/adapters/home-test.jshint.js","social-web-infinity/tests/unit/adapters/login-test.js","social-web-infinity/tests/unit/adapters/login-test.jshint.js","social-web-infinity/tests/unit/adapters/user-info-test.js","social-web-infinity/tests/unit/adapters/user-info-test.jshint.js","social-web-infinity/tests/unit/controllers/application-test.js","social-web-infinity/tests/unit/controllers/application-test.jshint.js","social-web-infinity/tests/unit/controllers/home-test.js","social-web-infinity/tests/unit/controllers/home-test.jshint.js","social-web-infinity/tests/unit/controllers/login-test.js","social-web-infinity/tests/unit/controllers/login-test.jshint.js","social-web-infinity/tests/unit/controllers/sign-up-test.js","social-web-infinity/tests/unit/controllers/sign-up-test.jshint.js","social-web-infinity/tests/unit/controllers/user-info-test.js","social-web-infinity/tests/unit/controllers/user-info-test.jshint.js","social-web-infinity/tests/unit/models/home-test.js","social-web-infinity/tests/unit/models/home-test.jshint.js","social-web-infinity/tests/unit/models/login-test.js","social-web-infinity/tests/unit/models/login-test.jshint.js","social-web-infinity/tests/unit/models/post-test.js","social-web-infinity/tests/unit/models/post-test.jshint.js","social-web-infinity/tests/unit/models/user-info-test.js","social-web-infinity/tests/unit/models/user-info-test.jshint.js","social-web-infinity/tests/unit/routes/home-test.js","social-web-infinity/tests/unit/routes/home-test.jshint.js","social-web-infinity/tests/unit/routes/login-test.js","social-web-infinity/tests/unit/routes/login-test.jshint.js","social-web-infinity/tests/unit/routes/sign-up-test.js","social-web-infinity/tests/unit/routes/sign-up-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('social-web-infinity/tests/adapters/login.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/login.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/adapters/post.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/post.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/post.js should pass jshint.\\nadapters/post.js: line 6, col 23, \\'SOCIAL_LOGIN\\' is not defined.\\nadapters/post.js: line 19, col 13, \\'jQuery\\' is not defined.\\n\\n2 errors');\n  });\n});","define('social-web-infinity/tests/adapters/user-info.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/user-info.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/user-info.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/components/chat-card.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/chat-card.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/chat-card.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/components/menu-card.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/menu-card.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/menu-card.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/components/post-card-text.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/post-card-text.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/post-card-text.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/components/post-card-with-image.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/post-card-with-image.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/post-card-with-image.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/components/post-card-with-video.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/post-card-with-video.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/post-card-with-video.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/components/profile-card.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/profile-card.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/profile-card.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/controllers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/application.js should pass jshint.\\ncontrollers/application.js: line 11, col 21, \\'user\\' is defined but never used.\\ncontrollers/application.js: line 31, col 10, Missing semicolon.\\ncontrollers/application.js: line 39, col 25, Missing semicolon.\\ncontrollers/application.js: line 40, col 7, Missing semicolon.\\ncontrollers/application.js: line 7, col 9, \\'SOCIAL_LOGIN\\' is not defined.\\ncontrollers/application.js: line 37, col 9, \\'SOCIAL_LOGIN\\' is not defined.\\ncontrollers/application.js: line 38, col 9, \\'SOCIAL_LOGIN\\' is not defined.\\ncontrollers/application.js: line 17, col 25, \\'$\\' is not defined.\\ncontrollers/application.js: line 28, col 17, \\'$\\' is not defined.\\n\\n9 errors');\n  });\n});","define('social-web-infinity/tests/controllers/home.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/home.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/home.js should pass jshint.\\ncontrollers/home.js: line 8, col 43, Missing semicolon.\\ncontrollers/home.js: line 9, col 17, Missing semicolon.\\n\\n2 errors');\n  });\n});","define('social-web-infinity/tests/controllers/user-info.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/user-info.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/user-info.js should pass jshint.\\ncontrollers/user-info.js: line 16, col 32, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/user-info.js: line 28, col 17, \\'SOCIAL_LOGIN\\' is not defined.\\n\\n2 errors');\n  });\n});","define('social-web-infinity/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('social-web-infinity/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'social-web-infinity/tests/helpers/start-app', 'social-web-infinity/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _socialWebInfinityTestsHelpersStartApp, _socialWebInfinityTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _socialWebInfinityTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _socialWebInfinityTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('social-web-infinity/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/helpers/resolver', ['exports', 'social-web-infinity/resolver', 'social-web-infinity/config/environment'], function (exports, _socialWebInfinityResolver, _socialWebInfinityConfigEnvironment) {\n\n  var resolver = _socialWebInfinityResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _socialWebInfinityConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _socialWebInfinityConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('social-web-infinity/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/helpers/start-app', ['exports', 'ember', 'social-web-infinity/app', 'social-web-infinity/config/environment'], function (exports, _ember, _socialWebInfinityApp, _socialWebInfinityConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _socialWebInfinityConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _socialWebInfinityApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('social-web-infinity/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/instance-initializers/service-call.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | instance-initializers/service-call.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'instance-initializers/service-call.js should pass jshint.\\ninstance-initializers/service-call.js: line 8, col 8, \\'config\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('social-web-infinity/tests/integration/components/chat-card-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('chat-card', 'Integration | Component | chat card', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'N2/mJyi1',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"chat-card\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '31cNFMvO',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"chat-card\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('social-web-infinity/tests/integration/components/chat-card-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/chat-card-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/chat-card-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/integration/components/menu-card-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('menu-card', 'Integration | Component | menu card', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '2uS1wtou',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"menu-card\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'yyY2RPVB',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"menu-card\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('social-web-infinity/tests/integration/components/menu-card-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/menu-card-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/menu-card-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/integration/components/post-card-text-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('post-card-text', 'Integration | Component | post card text', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'LmiXd6c5',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"post-card-text\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'Wcdwd3C9',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"post-card-text\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('social-web-infinity/tests/integration/components/post-card-text-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/post-card-text-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/post-card-text-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/integration/components/post-card-with-image-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('post-card-with-image', 'Integration | Component | post card with image', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'oZGpg1n5',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"post-card-with-image\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'Vm0+TKk4',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"post-card-with-image\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('social-web-infinity/tests/integration/components/post-card-with-image-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/post-card-with-image-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/post-card-with-image-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/integration/components/post-card-with-video-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('post-card-with-video', 'Integration | Component | post card with video', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'oWOGxi0e',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"post-card-with-video\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'Iox3G85j',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"post-card-with-video\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('social-web-infinity/tests/integration/components/post-card-with-video-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/post-card-with-video-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/post-card-with-video-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/integration/components/profile-card-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('profile-card', 'Integration | Component | profile card', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'sTnBTKse',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"profile-card\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'Tdcmx6Zl',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"profile-card\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('social-web-infinity/tests/integration/components/profile-card-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/profile-card-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/profile-card-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/models/home.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/home.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/home.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/models/login.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/login.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/models/post.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/post.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/post.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/models/user-info.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/user-info.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user-info.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/routes/home.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/home.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/home.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/routes/login.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/services/service.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/service.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/service.js should pass jshint.\\nservices/service.js: line 15, col 38, Missing semicolon.\\nservices/service.js: line 13, col 13, \\'self\\' is defined but never used.\\nservices/service.js: line 28, col 28, \\'self\\' is defined but never used.\\nservices/service.js: line 31, col 24, \\'self\\' is defined but never used.\\n\\n4 errors');\n  });\n});","define('social-web-infinity/tests/test-helper', ['exports', 'social-web-infinity/tests/helpers/resolver', 'ember-qunit'], function (exports, _socialWebInfinityTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_socialWebInfinityTestsHelpersResolver['default']);\n});","define('social-web-infinity/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/unit/adapters/home-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:home', 'Unit | Adapter | home', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('social-web-infinity/tests/unit/adapters/home-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/home-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/home-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/unit/adapters/login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:login', 'Unit | Adapter | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('social-web-infinity/tests/unit/adapters/login-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/login-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/login-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/unit/adapters/user-info-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:user-info', 'Unit | Adapter | user info', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('social-web-infinity/tests/unit/adapters/user-info-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/user-info-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/user-info-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/unit/controllers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('social-web-infinity/tests/unit/controllers/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/unit/controllers/home-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:home', 'Unit | Controller | home', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('social-web-infinity/tests/unit/controllers/home-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/home-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/home-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/unit/controllers/login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:login', 'Unit | Controller | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('social-web-infinity/tests/unit/controllers/login-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/login-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/login-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/unit/controllers/sign-up-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:sign-up', 'Unit | Controller | sign up', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('social-web-infinity/tests/unit/controllers/sign-up-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/sign-up-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/sign-up-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/unit/controllers/user-info-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:user-info', 'Unit | Controller | user info', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('social-web-infinity/tests/unit/controllers/user-info-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/user-info-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/user-info-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/unit/models/home-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('home', 'Unit | Model | home', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('social-web-infinity/tests/unit/models/home-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/home-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/home-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/unit/models/login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('login', 'Unit | Model | login', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('social-web-infinity/tests/unit/models/login-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/login-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/login-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/unit/models/post-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('post', 'Unit | Model | post', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('social-web-infinity/tests/unit/models/post-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/post-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/post-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/unit/models/user-info-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user-info', 'Unit | Model | user info', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('social-web-infinity/tests/unit/models/user-info-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/user-info-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-info-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/unit/routes/home-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:home', 'Unit | Route | home', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('social-web-infinity/tests/unit/routes/home-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/home-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/home-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/unit/routes/login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('social-web-infinity/tests/unit/routes/login-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/login-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass jshint.');\n  });\n});","define('social-web-infinity/tests/unit/routes/sign-up-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:sign-up', 'Unit | Route | sign up', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('social-web-infinity/tests/unit/routes/sign-up-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/sign-up-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/sign-up-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('social-web-infinity/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"tests.js"}